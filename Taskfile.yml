version: "3"

tasks:
  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: ci:sync
      - task: config:sync
      - task: dependabot:sync
      - task: github:sync
      - task: markdown:fix
      - task: general:format-prettier
      - task: general:correct-spelling
      - task: python:format

  check:
    desc: Check for problems with the project
    deps:
      - task: general:check-formatting
      - task: ci:validate
      - task: general:check-spelling
      - task: config:validate
      - task: markdown:lint
      - task: markdown:check-links
      - task: python:lint
      - task: python:test
      - task: yaml:lint

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    cmds:
      - npx prettier --write .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if ! which ec &>/dev/null; then
          echo "ec not found or not in PATH. Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell --write-changes

  ci:sync:
    desc: Sync CI workflows from templates
    vars:
      WORKFLOWS_PATH: "./.github/workflows"
      WORKFLOW_TEMPLATES_PATH: "./workflow-templates"
    cmds:
      - |
        cp \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-general-formatting-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-markdown-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-prettier-formatting-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-python-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-taskfiles.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-yaml-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/sync-labels.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/spell-check-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/test-python-poetry-task.yml" \
          "{{.WORKFLOWS_PATH}}"

  config:sync:
    desc: Sync configuration files from templates
    vars:
      REPOSITORY_ROOT_PATH: "./"
      WORKFLOW_TEMPLATE_ASSETS_PATH: "./workflow-templates/assets"
    cmds:
      - |
        cp \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/shared/.editorconfig" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-python/.flake8" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-markdown/.markdown-link-check.json" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-markdown/.markdownlint.yml" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-yaml/.yamllint.yml" \
          "{{.REPOSITORY_ROOT_PATH}}"

  dependabot:sync:
    desc: Sync workflow duplicates for dependabot checks
    vars:
      WORKFLOW_TEMPLATES_PATH: "./workflow-templates"
      WORKFLOW_TEMPLATE_COPIES_PATH: "./workflow-templates/dependabot/workflow-template-copies/.github/workflows"
    cmds:
      # Sync workflow templates with the copies in the folder where Dependabot can check them for updates.
      - mkdir --parents "{{.WORKFLOW_TEMPLATE_COPIES_PATH}}"
      - rm --force "{{.WORKFLOW_TEMPLATE_COPIES_PATH}}"/*
      - |
        find "{{.WORKFLOW_TEMPLATES_PATH}}" \
          -maxdepth 1 \
          -type f \
          -regex '.*\.ya?ml' \
          -exec cp '{}' "{{.WORKFLOW_TEMPLATE_COPIES_PATH}}" \;

  github:sync:
    desc: Sync GitHub community health files
    vars:
      ISSUE_TEMPLATES_INSTALLATION_PATH: "./.github/ISSUE_TEMPLATE"
      ISSUE_TEMPLATES_PATH: "./issue-templates"
    cmds:
      - |
        cp \
          "{{.ISSUE_TEMPLATES_PATH}}/minimal/bug-report.md" \
          "{{.ISSUE_TEMPLATES_PATH}}/minimal/feature-request.md" \
          "{{.ISSUE_TEMPLATES_INSTALLATION_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: mktemp -t workflow-schema-XXXXXXXXXX.json
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
      TEMPLATE_WORKFLOWS_DATA_PATH: "./workflow-templates/*.{yml,yaml}"
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx ajv-cli validate \
          --strict=false \
          -s "{{.WORKFLOW_SCHEMA_PATH}}" \
          -d "{{.WORKFLOWS_DATA_PATH}}"
      - |
        npx ajv-cli validate \
          --strict=false \
          -s "{{.WORKFLOW_SCHEMA_PATH}}" \
          -d "{{.TEMPLATE_WORKFLOWS_DATA_PATH}}"

  config:validate:
    desc: Validate configuration files against their JSON schema
    vars:
      # Last version with support for draft-04, used by Dependabot schema
      AJV_CLI_VERSION: 3.3.0
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/dependabot-2.0.json
      DEPENDABOT_SCHEMA_URL: https://json.schemastore.org/dependabot-2.0
      DEPENDABOT_SCHEMA_PATH:
        sh: mktemp -t dependabot-schema-XXXXXXXXXX.json
      DEPENDABOT_DATA_PATH: "**/dependabot.yml"
      LABEL_CONFIG_SCHEMA_PATH: workflow-templates/assets/sync-labels/arduino-tooling-gh-label-configuration-schema.json
      LABEL_CONFIG_DATA_PATH: "workflow-templates/assets/sync-labels/*.{yml,yaml}"
      # Source: https://github.com/DavidAnson/markdownlint/blob/main/schema/markdownlint-config-schema.json
      # Note: temporarily using schema from `next` branch due to bug in the one on `main`.
      # (https://github.com/DavidAnson/markdownlint/pull/406).
      MARKDOWNLINT_SCHEMA_URL: https://raw.githubusercontent.com/DavidAnson/markdownlint/next/schema/markdownlint-config-schema.json
      MARKDOWNLINT_SCHEMA_PATH:
        sh: mktemp -t markdownlint-schema-XXXXXXXXXX.json
      MARKDOWNLINT_DATA_PATH: "**/.markdownlint.{yml,yaml}"
    cmds:
      - wget --quiet --output-document="{{.DEPENDABOT_SCHEMA_PATH}}" {{.DEPENDABOT_SCHEMA_URL}}
      - npx ajv-cli@{{.AJV_CLI_VERSION}} validate -s "{{.DEPENDABOT_SCHEMA_PATH}}" -d "{{.DEPENDABOT_DATA_PATH}}"
      - npx ajv-cli validate -s "{{.LABEL_CONFIG_SCHEMA_PATH}}" -d "{{.LABEL_CONFIG_DATA_PATH}}"
      - wget --quiet --output-document="{{.MARKDOWNLINT_SCHEMA_PATH}}" {{.MARKDOWNLINT_SCHEMA_URL}}
      - npx ajv-cli validate --allow-union-types -s "{{.MARKDOWNLINT_SCHEMA_PATH}}" -d "{{.MARKDOWNLINT_DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]]; then
          # npx --call uses the native shell, which makes it too difficult to use npx for this application on Windows,
          # so the Windows user is required to have markdown-link-check installed and in PATH.
          if ! which markdown-link-check &>/dev/null; then
            echo "markdown-link-check not found or not in PATH. Please install: https://github.com/tcort/markdown-link-check#readme"
            exit 1
          fi
          # Default behavior of the task on Windows is to exit the task when the first broken link causes a non-zero
          # exit status, but it's better to check all links before exiting.
          set +o errexit
          STATUS=0
          # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
          # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
          # \ characters special treatment on Windows in an attempt to support them as path separators.
          for file in $(find . -regex ".*[.]md"); do
            markdown-link-check \
              --quiet \
              --config "./.markdown-link-check.json" \
              "$file"
            STATUS=$(( $STATUS + $? ))
          done
          exit $STATUS
        else
          npx --package=markdown-link-check --call='
            STATUS=0
            for file in $(find . -regex ".*[.]md"); do
              markdown-link-check \
                --quiet \
                --config "./.markdown-link-check.json" \
                "$file"
              STATUS=$(( $STATUS + $? ))
            done
            exit $STATUS
          '
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/shared/Taskfile.yml
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/shared/Taskfile.yml
  poetry:update-deps:
    desc: Update all dependencies managed by Poetry to their newest versions
    cmds:
      - poetry update

  python:test:
    desc: Run Python tests
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run pytest workflow-templates/assets/deploy-mkdocs-versioned/siteversion/tests

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:lint:
    desc: Lint Python code
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run flake8 --show-source

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:format:
    desc: Format Python files
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run black .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-yaml-task/Taskfile.yml
  yaml:lint:
    desc: Check for problems with YAML files
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run yamllint --format {{default "colored" .YAMLLINT_FORMAT}} .
